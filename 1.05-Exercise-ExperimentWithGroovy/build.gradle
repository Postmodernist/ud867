task stringsAndTypes {
    doLast {
        // DONE: Run `$ gradle sAT`
        println "Nice work abbreviating the task name"

        // DONE: Create a variable named foo and assign it the value 4.2
        def foo = 4.2

        // DONE: Print the value and class of foo
        println("foo = $foo, foo.class = ${foo.class}")

        // DONE: Use string interpolation to print the square root of 127
        // HINT: http://docs.oracle.com/javase/7/docs/api/java/lang/Math.html
        println("${Math.sqrt(127)}")

        // DONE: Assign the current date to foo and print it, along with its type
        // HINT:
        // http://docs.oracle.com/javase/7/docs/api/java/util/package-summary.html
        foo = new Date()
        println("foo = $foo, foo.class = ${foo.class}")

        // DONE: Use the `substring` method to extract my name from this string
        def hello = "Hello, Jeremy."
        println(hello[7..12])

        // DONE: Use `toUpperCase` to capitalize and print my name
        println(hello[7..12].toUpperCase())

        foo = "bar"
        println "$foo + foo = ${foo + "foo"}"
    }
}

task closures {
    doLast {
        // DONE: Declare a closure that takes two arguments and adds them together
        // HINT: http://www.groovy-lang.org/closures.html
        def foo = { a, b -> a + b }

        // DONE: Call your closure with arguments 17 and 25, and print the result
        // Beware that something like `println addTwo 17, 25` is ambiguous
        println "${foo 17, 25}"
    }
}

task lists {
    doLast {
        // DONE: Declare a list containing 5 of your favorite candies
        // HINT: Try searching for "groovy list literal"
        def foo = ['chicken and broccoli pizza', 'big mac', 'boxmaster', 'philadelphia roll', 'shawarma']

        // DONE: Create a new list of your candies in all caps
        // HINT: http://mrhaki.blogspot.ca/2010/05/groovy-goodness-use-collect-with.html
        def bar = foo.collect { it.toUpperCase() }

        // DONE: Print each capital candy
        bar.forEach this.&println
    }
}
